# exec.pdx -*- tcl -*-
#
#	Define nub handling of 'exec' command for spawning.
#
# Copyright (c) 2003-2006 ActiveState Software Inc.
#
# All rights reserved.
# 
# RCS: @(#) $Id: uplevel.pdx,v 1.2 2000/05/30 22:54:54 hershey Exp $

# Register the extension

instrument::addExtension 2.0 {exec}

# exec --
#
#	A replacement for the standard 'exec' command.
#	The code here performs all the operations of the
#	original code, and additionally asks the frontend
#	to open a new debugger window for the new process
#	if a spawnpoint was set. 
#	If that request is granted the command will launch
#	the new process so that can be under debugger
#	control too. The information about the new session
#	is transfered to the application through the environment.
#
# Arguments:
#	args	Arguments for the internal 'exec'
#
# Results:
#	Returns the result of the exec statement.

instrument::spawnCommand  exec
instrument::nubCmdWrapper exec {args} {
    if {[DbgNub_SpawnInfo AtSpawnpoint]} {
	# Spawn point set here by the user. Ask the frontend for
	# a sub-debugger. This operation can fail. A failure is
	# indicated by '$port == {}'.

	DbgNub_SpawnRequest [list exec $args]

	set port    [DbgNub_SpawnInfo Port]
	set cdata   [DbgNub_SpawnInfo CData]
	set host    [DbgNub_SpawnInfo Host]
    } else {
	# For test purposes we ignore the command entirely if there
	# is no spawn point here.

	set port {}
    }

    if {$port == {}} {
	# The request for sub-debugger failed. We perform the regular
	# spawn which is not under debugger control. In the scope of
	# the caller.

	return [uplevel 1 [linsert $args 0 DbgNub_execCmd]]
    }

    # The request is good. We launch the sub-process and
    # provide the spawn information in the environment.

    global env
    set    env(DEBUG_INFO) [list $host $port $cdata]

    return [uplevel 1 [linsert $args 0 DbgNub_execCmd]]
}
