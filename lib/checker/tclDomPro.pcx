# -*- tcl -*- tclDomPro.pcx --
#
#	This file implements the TclPro Checker extension for TclDomPro.
#
# Copyright (c) 1999-2000 Ajuba Solutions
# Copyright (c) 2003-2006 ActiveState Software Inc.
# All rights reserved.
# 
# RCS: @(#) $Id: tclDomPro.pcx,v 1.12 2000/05/30 22:28:57 wart Exp $

# ### ######### ###########################
## Requisites

package require pcx          ; # PCX API

# ### ######### ###########################
## Tcl core version dependencies of the package this checker is for.

pcx::register tclDomPro
pcx::tcldep   1.0 needs tcl

# ### ######### ###########################

# ### ######### ###########################
## Package specific message types and their human-readable
## translations.

## None

# ### ######### ###########################
# scanCmdsX.X --
# Define the set of commands that need to be recursed into when 
# generating a list of user defiend procs, namespace and Class 
# contexts and procedure name resolutions info.

pcx::scan 1.0 DOMImplementation
pcx::scan 1.0 dom::DOMImplementation

# ### ######### ###########################
# Define the set of command-specific checkers used by this package.

pcx::check 1.0 std DOMImplementation	{checkSimpleArgs 1 -1 {{checkOption {
    {hasFeature		{checkSimpleArgs 2 2 {checkWord}}}
    {create		{checkSimpleArgs 0 1 {checkVarNameWrite}}}
    {destroy		{checkSimpleArgs 1 1 {checkWord}}}
    {parse		{checkSimpleArgs 1 3 {checkWord {checkOption {
	{-parser {checkSimpleArgs 1 1 checkWord}}
	{-progresscommand {checkSimpleArgs 1 1 checkBody}}
	{-chunksize {checkSimpleArgs 1 1 checkInt}}
	{-final {checkSimpleArgs 1 1 checkBoolean}}
	{-trim {checkSimpleArgs 0 0 {}}}} {}}}}
    }
    {serialize		{checkSimpleArgs 1 3 {checkWord {checkOption {
	{-newline {checkSimpleArgs 1 1 {checkList}}}} {}}}}}
	{trim		{checkSimpleArgs 1 1 {checkWord}}}
    } {}}}
}

pcx::check 1.0 std document		{checkSimpleArgs 2 -1 {{checkOption {
    {cget		{checkSimpleArgs 2 2 {checkWord
    {checkSwitches 0 {
	-doctype {}
	-implementation {}
	-documentElement {}
    } {}}}}}
    {configure		{checkSimpleArgs 2 3 {checkWord
    {checkOption {
	{-doctype {checkSimpleArgs 1 1 {checkWord}}}
	{-implementation {checkSimpleArgs 1 1 {checkWord}}}
    } {}}}}}
    {createElement	{checkSimpleArgs 2 2 {checkWord}}}
    {createDocumentFragment	{checkSimpleArgs 1 1 {checkWord}}}
    {createTextNode	{checkSimpleArgs 2 2 {checkWord}}}
    {createComment	{checkSimpleArgs 2 2 {checkWord}}}
    {createCDATASection	{checkSimpleArgs 2 2 {checkWord}}}
    {createProcessingInstruction	{checkSimpleArgs 3 3 {checkWord}}}
    {createAttribute	{checkSimpleArgs 2 2 {checkWord}}}
    {createEntity	{checkSimpleArgs 1 1 {checkWord}}}
    {createEntityReference	{checkSimpleArgs 1 1 {checkWord}}}
    {createDocTypeDecl	{checkSimpleArgs 6 6 {checkWord}}}
    {getElementsByTagName	{checkSimpleArgs 2 2 {checkWord}}}
} {}}}}

pcx::check 1.0 std node			{checkSimpleArgs 2 -1 {{checkOption {
    {cget		{checkSimpleArgs 2 2 {
	checkWord {checkSwitches 0 {
	    -nodeName {}
	    -nodeType {}
	    -parentNode {}
	    -childNodes {}
	    -firstChild {}
	    -lastChild {}
	    -previousSibling {}
	    -nextSibling {}
	    -attributes {}
	    -nodeValue {}
	    -startLine {}
	    -startColumn {}
	    -startWidth {}
	    -endLine {}
	    -endColumn {}
	    -endWidth {}
	    -parsingComplete {}
	} {}}}}
    }
    {configure		{checkSimpleArgs 3 3 {
	checkWord {checkOption {
	    {-childNodes {checkSimpleArgs 1 1 {checkWord}}}
	    {-firstChild {checkSimpleArgs 1 1 {checkWord}}}
	    {-lastChild {checkSimpleArgs 1 1 {checkWord}}}
	    {-nodeValue {checkSimpleArgs 1 1 {checkWord}}}
	} {}}}}
    }
    {insertBefore	{checkSimpleArgs 2 3 {checkWord}}}
    {replaceChild	{checkSimpleArgs 3 3 {checkWord}}}
    {removeChild	{checkSimpleArgs 2 2 {checkWord}}}
    {appendChild	{checkSimpleArgs 2 2 {checkWord}}}
    {hasChildNodes	{checkSimpleArgs 1 1 {checkWord}}}
    {cloneNode		{checkSimpleArgs 1 2 {checkWord checkBoolean}}}
    {children		{checkSimpleArgs 1 1 {checkWord}}}
    {parent		{checkSimpleArgs 1 1 {checkWord}}}
} {}}}}

pcx::check 1.0 std element			{checkSimpleArgs 2 -1 {{checkOption {
    {cget		{checkSimpleArgs 2 2 {
	checkWord {checkSwitches 0 {
	    -tagName {}
	    -empty {}
	} {}}}}
    }
    {configure		{checkSimpleArgs 3 3 {
	checkWord {checkOption {
	    {-tagName {checkSimpleArgs 1 1 {checkWord}}}
	    {-empty {checkSimpleArgs 1 1 {checkBoolean}}}
	} {}}}}
    }
    {getAttribute		{checkSimpleArgs 2 2 {checkWord}}}
    {setAttribute		{checkSimpleArgs 3 3 {checkWord}}}
    {removeAttribute		{checkSimpleArgs 2 2 {checkWord}}}
    {getAttributeNode		{checkSimpleArgs 2 2 {checkWord}}}
    {setAttributeNode		{checkSimpleArgs 3 3 {checkWord}}}
    {removeAttributeNode	{checkSimpleArgs 2 2 {checkWord}}}
    {getElementsByTagName	{checkSimpleArgs 2 2 {checkWord}}}
    {normalize			{checkSimpleArgs 1 1 {checkWord}}}
} {}}}}

pcx::check 1.0 std processinginstruction	{checkSimpleArgs 2 -1 {{checkOption {
    {cget		{checkSimpleArgs 2 2 {
	checkWord {checkSwitches 0 {
	    -target {}
	    -data {}
	} {}}}}
    }
    {configure		{checkSimpleArgs 3 3 {
	checkWord {checkOption {
	    {-data {checkSimpleArgs 1 1 checkWord}}
	} {}}}}}
    } {}}}
}

# ### ######### ###########################

namespace eval tclDomPro {
    # ### ######### ###########################
    # aliasCmds --
    # Define the set of commands that are created as aliases of the
    # corresponding dom::* commands.  These aliases are created only 
    # for the current version incr Tcl.
    
    variable aliasCmds {
	DOMImplementation document node element processinginstruction
    }
}

# ### ######### ###########################
## Initialization

## This package provides its own initialization command to handle
## special definitions. For the common parts it uses the standard
## initialization.

proc ::tclDomPro::init {ver} {
    pcx::init tclDomPro $ver

    # Add aliased checkers.
    # Alias the standard dom::* commands so the namespace qualifier 
    # appears in the comand name.

    variable aliasCmds
    set aliases {}
    foreach name $aliasCmds {
	if {[pcx::topDefinition $name] != {}} {
	    lappend aliases dom::$name [pcx::topDefinition $name]
	}
    }
    pcx::checkers $aliases
}

# ### ######### ###########################
pcx::complete
