# -*- tcl -*- sybtcl.pcx --
#
#	This file implements the TclPro Checker extension for SybTcl.
#
# Copyright (c) 1999-2000 Ajuba Solutions
# Copyright (c) 2003-2006 ActiveState Software Inc.
# All rights reserved.
# 
# RCS: @(#) $Id: sybtcl.pcx,v 1.3 2000/05/30 22:28:54 wart Exp $

# ### ######### ###########################
## Requisites

package require pcx          ; # PCX API

# ### ######### ###########################
## Tcl core version dependencies of the package this checker is for.

pcx::register sybtcl
pcx::tcldep   3.0 needs tcl

# ### ######### ###########################

# ### ######### ###########################
## Package specific message types and their human-readable
## translations.

pcx::message badSubstChar {invalid Sybase substitution character} err

# ### ######### ###########################
# scanCmdsX.X --
# Define the set of commands that need to be recuresed into when 
# generating a list of user defiend procs, namespace and Class 
# contexts and procedure name resolutions info.

pcx::scan 3.0 sybevent
pcx::scan 3.0 sybnext

# ### ######### ###########################
# Define the set of command-specific checkers used by this package.

pcx::check 3.0 std sybcancel	{checkSimpleArgs 1 1 {checkWord}}
pcx::check 3.0 std sybclose	{checkSimpleArgs 1 1 {checkWord}}
pcx::check 3.0 std sybcols	{checkSimpleArgs 1 1 {checkWord}}
pcx::check 3.0 std sybconnect	{checkSimpleArgs 2 6 {checkWord checkWord checkWord checkWord checkFileName checkWord}}
pcx::check 3.0 std syberrhandler	{checkSimpleArgs 0 1 {{checkProcCall 6}}}
pcx::check 3.0 std sybevent	{checkSimpleArgs 1 2 {checkWord checkBody}}
pcx::check 3.0 std sybmsghandler	{checkSimpleArgs 0 1 {{checkProcCall 8}}}
pcx::check 3.0 std sybnext		{checkSimpleArgs 1 -1 {checkWord checkBody sybtcl::checkSubstChar sybtcl::checkVarColnumPairs}}
pcx::check 3.0 std sybpoll		{checkSimpleArgs 1 3 {checkWord checkInt {
    checkSwitches 1 {-all} {}}}
}
pcx::check 3.0 std sybreadtext	{checkSimpleArgs 2 3 {checkWord {
    checkOption {
	{-variable	{checkSimpleArgs 1 1 {checkVarNameWrite}}}
	{-file		{checkSimpleArgs 1 1 {checkFileName}}}
    } {checkSimpleArgs 1 1 checkFileName}}}
}
pcx::check 3.0 std sybretval	{checkSimpleArgs 1 1 {checkWord}}
pcx::check 3.0 std sybsql	{checkSimpleArgs 2 3 {checkWord checkWord {
    checkSwitches 1 {-async} {}}}
}
pcx::check 3.0 std sybuse	{checkSimpleArgs 1 2 {checkWord}}
pcx::check 3.0 std sybwritetext	{checkSimpleArgs 4 6 {checkWord checkWord checkWord {
    checkOption {
	{-variable	{checkSimpleArgs 1 2 {checkVarName {
	    checkSwitches 1 {-nolog} {}}}}}
	    {-file		{checkSimpleArgs 1 2 {checkFileName {
		checkSwitches 1 {-nolog} {}}}}}
	    } {checkSimpleArgs 1 2 {checkFileName {
		checkSwitches 1 {-nolog} {}}}
	    }
	}
    }
}

# ### ######### ###########################
## Initialization

## This package relies on the standard initialization sequence of
## 'pcx::init'. This is automatically called if no 'init' command
## is found in the namespace of the checker package.

# ### ######### ###########################

# ### ######### ###########################
# Checkers for specific commands --

namespace eval ::sybtcl {}

# sybtcl::checkSubstChar --
#
#	Check to see the next token is a either a single character, empty
#	string, or nonliteral.  If not, log an badSubstChar error.
#
# Arguments:
#	tokens		The list of word tokens for the current command.
#	index		The index of the next word to be checked.
#
# Results:
#	Returns the index of the next token to be checked.

proc sybtcl::checkSubstChar {tokens index} {

    set word [lindex $tokens $index]

    if {![getLiteral $word literal]} {
	return [checkWord $tokens $index]
    }
    if {[string length $literal] > 1} {
	logError sybtcl::badSubstChar [getTokenRange $word]
    }
    return [incr index]
}

# sybtcl::checkVarColnumPairs --
#
#	Check to see the tokens starting with index are ?varname wholenum?
#	pairs.
#
# Arguments:
#	tokens		The list of word tokens for the current command.
#	index		The index of the next word to be checked.
#
# Results:
#	Returns the index of the last token + 1 (all have been checked).

proc sybtcl::checkVarColnumPairs {tokens index} {
    
    set argc [llength $tokens]

    while {$index < $argc} {
	set index [checkVarNameWrite $tokens $index]
	if {$index >= $argc} {
	    logError numArgs {}
	} else {
	    set index [checkWholeNum $tokens $index]
	}
    }
    return $index
}

# ### ######### ###########################
pcx::complete
