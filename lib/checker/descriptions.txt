desc nonPortCmdR {A command was specified that is not supported on all platforms. Advice on how to make it portable is given.}

desc coreTcl::warnUplevel {While the level argument of the uplevel/upvar commands is optional it is strongly recommended to always explicitly specify a level.}

desc pragmaBad         {A syntactically wrong pragma was found.} 
desc pragmaNotComplete {Pragmas cannot be split across several lines.} 
desc warnDoubleDash {The command is called with a dynamic string in a position where it can be mis-interpreted as a switch, should it start with a dash. The command is able to take a double-dash switch to force interpretation of all following arguments as non-switches, even if beginning with a dash.}

desc warnArgWrite {A command writes to a variable representing a procedure argument.}

desc argAfterArgs {An argument has been specified after the <i>args</i>    keyword in a procedure argument list. The <i>args</i> argument is treated
    like a normal parameter and does not collect the remaining parameters
    into a single list.}
desc argsNotDefault {The <i>args</i> keyword cannot be initialized to contain a    default value. Although the Tcl interpreter does not complain about this
    usage, the default value is ignored.}
desc arrayReadAsScalar {You cannot assign an array variable to a scalar variable.    The Tcl Dev Kit TclChecker is aware of the internal variables <i>tcl_platform</i>
    and <i>Tk::priv</i>, and will generate this error when you attempt to
    assign these variables to a scalar.}
desc badArrayIndex {This error occurs when you try to read from the    <i>tcl_platform</i> internal variable with an invalid index key. The
    <i>tcl_platform</i> variable is initialized at run-time by the system
    definition, and should not be manually altered.}
desc badBoolean {The command expects the string to specify a Boolean value.    The string can be "1", "0", "true", "false", "yes", "no", "on", or "off" in
    any unique abbreviation and case.}
desc badByteNum {}
desc badColorFormat {The command expects the string to specify a color value.    The string can be any of the following forms:

    <ul>
      <li><i>colorname</i></li>
      <li>#RGB</li>
      <li>#RRGGBB</li>
      <li>#RRRGGGBBB</li>
      <li>#RRRRGGGGBBBB</li>
    </ul>

    <p><i>colorname</i> can be any of the valid textual names for a color
    defined in the server's color database file, such as "red" or "PeachPuff".
    If the color name is not a Tcl defined color, a warning is flagged stating
    that the color may not be portable across all platforms; see
    <code>nonPortColor</code>. The RGB characters represent hexadecimal
    digits that specify the red, green, and blue intensities of the color.</p>
    }

desc badContinuation {The checker saw a backslash character, followed by whitespace, followed by an end of line. It assumes that the user wanted to specify a continuation line, which has no whitespace between the backslash and the end of the line.}

desc badCursor {The command expects the string to specify a cursor to use.    The string can take any of the following forms:

    <ul>
      <li>""</li>
      <li><i>name</i></li>
      <li><i>name fgColor</i></li>
      <li>@<i>sourceFile fgColor</i></li>
      <li><i>name fgColor bgColor</i></li>
      <li>@<i>sourceFile maskFile fgColor bgColor</i></li>
    </ul>

    <p>If the <i>name</i> form is used, and the name of the cursor is not
    defined on all platforms, a warning is flagged stating that the cursor
    is not portable; see <code>nonPortCursor</code>. None of the forms that
    specify a color or multiple files are portable across all systems; they
    are flagged as being non-portable; <code>nonPortCmd</code>.}
desc badFloat {The command expects the string to consist of a    floating-point number, which is: white space; a sign; a sequence of digits;
    a decimal point; a sequence of digits; the letter "e"; and a signed decimal
    exponent. Any of the fields may be omitted, except that the digits either
    before or after the decimal point must be present and if the "e" is present
    then it must be followed by the exponent number.}
desc badIndex {The command expects the string to specify an index value.    The string can be an integer or "end".}
desc badIndexExpr {When reading an index, you must specify the exact integer    position, or the position relative to the end of the index using the
    "end" or "end-<i>index_number</i>" strings.}

desc badExtendedIndexExpr {
     When reading an index, you must specify the exact integer
     position, or the sum/difference of two integers (integer+integer,
     integer-integer), or the position relative to the end of the
     index using the "end" or "end-<i>index_number</i>" or
     "end+<i>index_number</i>" strings.
}

desc badInt {The command expects the string to specify an integer value.    The string can be optionally signed and optionally preceded by white
    space. If the first two characters of the string are "0x" then
    string is expected to be in hexadecimal form; if the first
    character of string is "0" then the string is expected to be in
    octal form; otherwise, the string is expected to be in decimal
    form.}
desc badKey {The command expects the <i>key</i> string to be a key    that matches one of the strings in the <i>options</i> list.}
desc badLevel {The command expects the string to be an integer or a "#"    character followed by an integer.}
desc badList {The command expects the string to be a valid Tcl list. The    reason the string is not a valid Tcl list is displayed in the message
    associated with the error.}
desc badListLength {The command expects the string to be a valid Tcl    list with a length <i>n</i> satisfying the condition "<i>n</i> %
    <i>x</i> == <i>y</i>". For example: "n % 2 == 0" is the condition
    for lists of even length.}
desc badMathOp {When working with mathematical expressions, you must use    valid operators for the "expr" command.  See "expr" in the Tcl Commands
    Manual section of the ActiveTcl User Guide.}
desc badMode {When specifying access modes for a Tcl channel, at least    one of the three read-write access modes (RDONLY, WRONLY, or RDWR) must
    be specified with optional modifiers (APPEND, CREAT, EXCL,
    NOCTTY, NONBLOCK or TRUNC).}
desc badNatNum {The command expects the string to specify an integer greater    than zero. The string can be any non-negative integer.}
desc badOption {The command expects the <i>option</i> string to be an    option that matches one of the strings in <i>options</i>.}
desc badPixel {The command expects the string to specify a pixel value.    The string must be an integer pixel or floating-point millimeter, optionally
    followed by one of the following characters: "c", "i", "m", or "p".}
desc badResource {The command expects the string to specify a resource value.    If the string length is not four characters, an error is flagged.}
desc badSwitch {The command expects the string to be a switch that    matches one of the strings in list of switch options.}
desc maybeBadSwitch {
	The command expected the string to be a switch that matches one of
	the strings in a list of switch options, however even a switch not
	in the list might be ok, as the set of switches is extensible and
	the list in the checker cannot account for such. The premier example
	of this is fconfigure's set of switches, which can be extended by
	user-defined channel types.
}
desc badVersion {The command expects a string that specifies a package version. A valid package version string is any number of integers
    separated by periods ("."), for example, "1.2.3", with no leading 0's, in since Tcl 8.5 a single dot may be 'a' or 'b'}
desc badRequirement {The command expects a valid package requirement, which can be a version number, a version number with a
     single trailing dash, or two version numbers spearated by a single dash.}
desc badWholeNum {The command expects the string to specify a whole value.    The string can be any non-negative integer.}
desc internalError {This message indicates a bug in the Tcl Dev Kit TclChecker.  Please    file a bug report, including the steps necessary to reproduce the error,
    at <a class="doc" href="http://bugs.activestate.com/Tcl Dev Kit">http://bugs.activestate.com/Tcl Dev Kit</a>.}
desc invalidUsage {All functions internal to the Tk binding have been moved    to the "Tk::" namespace and have been made private. In Tcl 8.4 mode,
    this error reports use of a command that is now invalid.}
desc mismatchOptions {Two or more options were specified that cannot be used at    the same time. The command should be re-written to use only one of the
    switches. This commonly occurs when an overloaded command
    performs completely different operations based on the
    switches.}
desc noExpr {Similar to the <code>numArgs</code> message. The Tcl Dev Kit TclChecker    flags this error message when an expression is missing in an <code>if</code>
    statement.}
desc nonDefAfterDef {A non-defaulted argument has been specified after a    defaulted argument in a procedure argument list. Although the Tcl
    interpreter does not complain about this usage, the default
    values are ignored.}
desc nonPortChannel {A channel was specified that is not supported on all    platforms. In most cases, this is when "file0", "file1", or "file2" is used
    instead of "stdin", "stdout", or "stderr".}
desc nonPortCmd {A command was specified that is not supported on all    platforms.}
desc nonPortColor {A color was specified that is not supported on all    platforms.}
desc nonPortCursor {A cursor was specified that is not supported on all    platforms.}
desc nonPortFile {A file name was specified that is not supported on all    platforms. This warning is flagged, then the string is a combination of
    words, variables, or commands separated by system-specific file
    separators (for example, "$dir\$file"). Use the <i>file join</i>
    command to add the system-specific file separators (for example,
    "[file join $dir $file]").}
desc nonPortOption {An option was specified that is not supported on all    platforms. Generally, the option has no effect on the systems that do not
    support this option.}
desc nonPortVar {A variable was used that is not supported on all platforms.    In most cases, this is when the <i>tcl_precision</i> variable is used.}
desc nonPublicVar {This error indicates that the program is trying to use    the contents of the <i>Tk::priv</i> variable. This variable is internal
    and should not be used.}
desc noScript {Similar to the <code>numArgs</code> message. The Tcl Dev Kit TclChecker    flags this error message when an expression is missing in an <code>if</code>
    statement.}
desc noSwitchArg {The command was called with a switch that expected an    argument. If no argument was given for the switch, this error is flagged.}
desc numArgs {An incorrect number of arguments were specified for a    command. Due to the dynamic nature of Tcl, this error might be flagged
    unnecessarily. For example, if the command is called within an
    <i>eval</i> body with variables that will expand to be multiple
    arguments. The Tcl Dev Kit TclChecker sees only the one argument, but this
    may expand to match the required number of arguments when the
    command is evaluated.}
desc numListElts {Some commands expect lists with a fixed number of elements.    This error indicates that an incorrect number of elements has been
    specified. See the documentation for the specific command in the ActiveTcl
    User Guide.}
desc obsoleteCmd {The specified command, option or variable does not exist    and is no longer supported in the version of the system you are checking.
    Use the suggested alternative command, option, or variable to upgrade
    the script.}
desc parse {The Tcl Dev Kit TclChecker could not parse the script completely due to a    parsing error. The reason for the parsing error is displayed in
    the message associated with the error.}
desc procNumArgs {You are using the wrong number of arguments to call the Tcl    procedure <i>procName</i> . Compare the number of arguments used to call
    the procedure to the number of arguments in the definition of
    <i>procName</i>.}
desc tooManyFieldArg {A defaulted procedure argument has been specified with    multiple values. An argument can have only one default value. If the value
    is to be a list, quotes or curly braces must be used.}
desc warnBehaviour {This warning indicates use of a variable whose behaviour    has changed between the current Tcl version and previous versions.}
desc warnBehaviourCmd {This warning indicates use of a command whose behaviour    has changed between the current Tcl version and previous versions.}
desc warnDeprecated {The specified command, option or variable does not exist    and is no longer supported in the version of the system you are checking.
    Use the suggested alternative command, option or variable to upgrade the
    script.}
desc warnExportPat {Each export pattern can contain <i>glob</i> -style special    characters, but it must not include any namespace qualifiers.
    That is, the pattern can only specify commands in the current
    (exporting) namespace.}
desc warnExpr {The <i>expr</i> command performs two levels of substitution    on all expressions that are not inside curly braces. To avoid the second
    substitution, and to improve the performance of the command, place the
    expression inside curly braces.

    <p>There are cases where the second level of substitution is required and
    this warning will not apply. The Tcl Dev Kit TclChecker does not discern between these
    cases.</p>
    }
desc warnNestedExpr {
     It doesn't make sense to use the <i>expr</i> command inside of an expression.
     It is superflous and makes the code only less readable and more confusing.
}
desc warnExtraClose {A close bracket or close brace without a matching open    bracket or open brace was detected. This frequently indicates an error
    introduced when a subcommand or script is deleted without deleting the
    final close brace or bracket.}
desc warnGlobalNsNonsense {Using the <code>global</code> command within a    <code>namespace eval</code> is an undefined operation.}
desc warnGlobalVarColl {When writing to the variable via <code>set</code>    it is undetermined if a global or namespace variable is
    created.}
desc warnIfKeyword {When using the <i>if</i> command, it is legal to omit the    <i>else</i> and <i>elseif</i> keywords. However, omission of these keywords
    tends to produce error-prone code; thus, a warning is flagged.}
desc warnInternalCmd {This message indicates that you are using commands internal    to an extension.  It is safer to use public APIs wherever possible.}
desc warnNamespacePat {Each <i>namespace</i> pattern is qualified with the name of    an exporting <i>namespace</i> and may have <i>glob</i> -style special
    characters in the command name at the end of the qualified name. The
    warning is flagged if <i>glob</i> characters appears in a <i>namespace</i>
    name.}
desc warnPattern {<i>Glob</i> patterns use brackets to specify a list of    characters to match. If brackets are used and the word is not properly
    quoted, Tcl will interpret this as a subcommand to be evaluated,
    rather than a pattern. This warning is flagged to avoid possible
    usage errors of this nature.}
desc warnReadonlyVar {The Tcl Dev Kit TclChecker is hard-coded to recognize certain    variables as internal to Tcl/Tk. The value of these variables should not
    be changed. These variables include:
      <ul>
        <li>tcl_platform (Tcl)</li>
        <li>tkPriv (Tk 8.3)</li>
        <li>tk::Priv (Tk 8.4)</li>
      </ul>
    }
desc warnRedefine {A procedure or class is being defined, imported, inherited,    or renamed into a scope where a procedure or class of the same name
    already exists.}
desc warnReserved {When checking scripts using older versions of Tcl, Tk or    [incr Tcl], this warning is flagged if a command is used that does not
    exist in the systems that you are checking against, but does exist in later
    versions. This warning helps to prevent scripts from defining commands that
    will eventually collide with later versions.}
desc warnShadowVar {This usage of the variable may hide or kill a    previous definition of the same name.}
desc warnUndefinedUpvar {The named procedure (in)directly calls the current    scope, but is not defining the variable expected by the
    upvar.}
desc warnUndefinedVar {The named variable is not known in the current    scope.}
desc warnUndefFunc {The specified function is not defined as part of the    "expr" command. See the "expr" command reference in the ActiveTcl User
    Guide for a list of valid functions.}
desc warnUndefProc {The procedure was not defined in any of the files that were    specified on the command line of the current invocation of the Tcl Dev Kit TclChecker.
    The procedure may get defined dynamically or in a file that was not
    specified on the Tcl Dev Kit TclChecker command line. This warning is triggered only
    for the first use of the undefined procedure in the files being checked.}
desc warnUnsupported {The specified command, option or variable still exists but    is no longer supported. Use the suggested alternative command, option,
    or variable to upgrade the script.}
desc warnUpvarNsNonsense {You cannot import procedure-local variables into a    namespace scope.}
desc warnVarRef {Some commands expect a variable name for an argument, for    example, <i>incr</i> . If the argument is a variable reference,
    this warning is flagged to report possible usage errors.}
desc winAlpha {The window name for any Tcl widget cannot begin with a    capital letter.}
desc winBeginDot {The path name for any Tcl widget must begin with a period    (".")}
desc winNotNull {}
desc blt::badIntRange {In some cases, legal integer ranges are defined as part    of the command. This error indicates that an integer value outside the
    legal range has been used.}
desc blt::badSignal {The <i>bgexec</i> command has an option "-killsignal" (Unix    only), which accepts a valid mnemonic value.  See the blt man pages for
    command specifications.}
desc blt::badSignalInt {The <i>bgexec</i> command has an option "-killsignal" (Unix    only), which accepts a valid signal integer value.  See the blt man pages for
    command specifications.}
desc coreTcl::badBinaryFmt {This error indicates that the string provided for the    binary command's format switch is invalid. See the documentation for the
    "binary" command in the ActiveTcl User Guide.}
desc coreTcl::badCharMap {}

desc coreTcl::badFormatFmt {This error indicates that the string provided for the    format or scan command's format switch is invalid. See the documentation
    for the "format" or "scan" command in the ActiveTcl User Guide.}

desc coreTcl::warnFormatFmt {
    This error indicates that a POSIX positional specifier in the string provided
    for the format or scan command's format switch is longer than two digits, i.e.
    greater than 100. Having so many arguments to the command seems excessive and
    is very likely wrong.
}

desc badRegexp {}
desc coreTcl::badSerialMode {When using the fconfigure command, if you are using the    -mode switch, you must specify a valid -mode string. See "fconfigure"
    in the ActiveTcl User Guide for information about command switches.}
desc coreTcl::badTraceOp {The command expects the trace operation string to be one    or more of the following characters: "r", "w", or "u".}
desc coreTcl::badBisect {
     The lsearch command does not allow the simultaneous use of
     -bisect and -all, nor -bisect and -not.
}
desc errBadBrktExp {The bracket expression is missing a close bracket. Common    errors of this type are caused when the closing bracket is interpreted as a
    character to match on. For example [] and [^] will generate this
    error because the close bracket is interpreted as a character to
    match, or not match, respectively. The correct expressions would
    be: []] and [^]].}
desc coreTcl::serverAndPort {The socket command specified the <i>-server</i> option and    the <i>-myport</i> option on the same command line. These are conflicting
    options and cannot be used together.}
desc coreTcl::socketArgOpt {}
desc coreTcl::socketAsync {The socket command specified the <i>-server</i> option and    the <i>-async</i> option on the same command line. These are conflicting
    options and cannot be used together.}
desc coreTcl::socketBadOpt {}
desc coreTcl::socketServer {The socket command specified the <i>-async</i> option and    the <i>-server</i> option on the same command line. These are conflicting
    options and cannot be used together.}
desc coreTcl::warnAIPattern {When using the auto_import command, be aware of functionality    changes between Tcl 8.4 and earlier versions.}
desc warnEscapeChar {The new regular expression package introduced in Tcl 8.1    added many new special character sequences, called "escape characters." When
    upgrading to 8.1 or later, the escape characters will change the semantics
    of the expression. To maintain the behavior of previous versions of Tcl,
    add another backslash before the character. (This warning is displayed only
    if you specify the <i>-use</i> option with Tcl 8.0 or earlier.)}
desc coreTcl::warnMemoryCmd {The "memory" command is only available when the core is    compiled using the <code>TCL_MEM_DEBUG</code> mode.}
desc warnNotSpecial {The backslash character is used to quote special characters    in an expression so their literal value can be used. The character
    following the backslash in this expression has no affect on the character.
    Consider simplifying the expression.}
desc warnQuoteChar {The new regular expression package introduced in Tcl 8.1    changed the semantics of the backslash character inside of bracket
    expressions. Previously they were treated as literal characters. Now they
    are treated as a quote character. To maintain the behavior of previous
    versions of Tcl, add another backslash before the existing backslash
    (for example, [*-\] becomes [*-\\]). (This warning is displayed only if you
    specify the <i>-use</i> option with Tcl 8.0 or earlier.)}
desc coreTcl::warnY2K {To avoid possible Y2K errors, use the "%Y" field descriptor    to generate years with centuries (for example, "1999" instead of "99").}
desc coreTk::badBindSubst {This error indicates that a placeholder character specified    with the "bind" command is invalid. Refer to the ActiveTcl User Guide for
    "bind" command specifications.}
desc badValidateSubst {
    This error indicates that a placeholder character specified for a
    -validatecommand script is invalid. Refer to the ActiveTcl User
    Guide for the "ttk::entry" command.
}
desc coreTk::badAlpha {The command expects a floating point number between 0.0 (transparent) and 1.0 (opaque)}
desc coreTk::badColormap {The command expects the string to specify a colormap to use.    If the string is "new", a new colormap is created. Otherwise, the string
    should be a valid window path name.}
desc coreTk::badEvent {The command expects the string to specify an event type.    If the string is not composed of a valid event and one or more related
    modifiers, an error is reported.}
desc coreTk::badGeometry {The command expects the string to specify a geometry value.    The string must have one of the following forms:

    <ul>
      <li><i>W</i> x <i>H</i></li>
      <li>&plusmn; <i>X</i> x &plusmn; <i>Y</i></li>
      <li><i>W</i> x <i>H</i> &plusmn; <i>X</i> x &plusmn; <i>Y</i></li>
    </ul>

    <p>...where the width (<i>W</i>) and height (<i>H</i>) values are positive
    integers, and the X (<i>X</i>) and Y (<i>Y</i>) coordinates are positive or
  negative integers.</p>}
desc coreTk::badGridMaster {The <i>grid</i> command flags an error if a valid window    name was never specified in the command.}
desc coreTk::badGridRel {When using the relative placement shortcuts in the    <i>grid</i> command (that is, "-", "x", or "^") an error is reported if the
    span column shortcut ("-") is used immediately after one of the
    other shortcuts.}
desc coreTk::badPalette {The command expects the string to be a valid palette    specification. The palette string may be either a single decimal number,
    specifying the number of shades of gray to use, or three decimal
    numbers separated by slashes ("/"), specifying the number of
    shades of red, green and blue to use, respectively.}
desc coreTk::badPriority {The command expects the string to specify a priority value.    The string must contain one of the following values: "widgetDefault",
    "startupFile", "userDefault", "interactive", or an integer
    between 0 and 100.}
desc coreTk::badScreen {The command expects the string to specify a screen value.    The string must have the following form:

    <pre>?<i>name</i> ?:<i>display</i> ?.<i>screen</i> ?</pre>

    <p>...where <i>name</i> is any string and <i>display</i> and <i>screen</i>
    are integers.</p>}
desc coreTk::badSticky {The <i>grid</i> command expects the string to specify    valid sticky coordinates. The string can contain any combination of the
    following characters: "n", "s", "e". or "w".}
desc coreTk::badTab {The command expects a list of strings that define tab    stops. If the Tcl interpreter cannot parse the list, an error is flagged.
    The tab list must consist of a list of screen distances giving the
    positions of the tab stops. Each position can optionally be
    followed in the next list element by one of the keywords "left",
    "right", "center", or "numeric", which specifies how to justify
    text relative to the tab stop.}
desc coreTk::badTabJust {The command expects the justification string to be one of    the following: "left", "right", "center", or "numeric".}
desc coreTk::badVirtual {The command expects the string to specify a virtual    event. The string must have the following form:

    <pre>&lt;&lt;<i>word</i>&gt;&gt;</pre>

    <p>...where <i>word</i> is any non-empty string.</p>}
desc coreTk::badVisual {The command expects the string to specify a visual.    The string can have the following form:
    <ul>
      <li><i>class depth</i></li>
      <li>default</li>
      <li><i>windowName</i></li>
      <li><i>number</i></li>
      <li>best ?<i>depth</i> ?</li>
    </ul>

    <p>The <i>class</i> string must be one of "directcolor", "grayscale",
    "pseudocolor", "staticcolor", "staticgray", or "truecolor", or any unique
    abbreviation. The <i>depth</i> value must be a valid integer.</p>}
desc coreTk::badVisualDepth {If the depth specified by a visual string is not a valid    integer, then this error is flagged.}
desc coreTk::nonPortBitmap {}
desc coreTk::nonPortKeysym {A keysym was specified that is not supported on all    platforms.}
desc coreTk::nonPortKeysym {The command expects an event but could not find one while    parsing the command line.}
desc coreTk::noVirtual {Virtual events are not allowed in event sequences. If a    virtual event (any event that begins with "&lt;&lt;" and ends with
    "&gt;&gt;") is found, then this message is flagged.}
desc coreTk::warnConsoleCmd {The "console" command is internal; its functionality may    change between Tcl versions.}
desc coreTcl::warnTkCmd {The "tk" command is internal; its functionality may    change between Tcl versions.}
desc expect::warnAmbiguous {The word being checked starts with a "-" but does not match    any of the known switches. Use <i>delimiter</i> to explicitly declare
    the end of the switch pattern.}
desc incrTcl::badMemberName {An [incr Tcl] member name was not correctly qualified.    When defining the body for a class procedure, class method, or class variable,
    it is necessary to reference the procedure or variable with the
    fully qualified name.}
desc incrTcl::classNumArgs {The wrong number of arguments are being used to instantiate    the [incr Tcl] class <i>className</i> . Compare the number of arguments
    used to instantiate the class to the number of arguments in the
    constructor defined by <i>className</i>.}
desc incrTcl::classOnly {The specified command is only valid in the context of an    [incr Tcl] class body.}
desc incrTcl::nsOnly {The specified command is only valid in the context of an    [incr Tcl] namespace body.}
desc incrTcl::nsOrClassOnly {The specified command is only valid in the context of an    [incr Tcl] class or namespace body.}
desc incrTcl::procOutScope {An [incr Tcl] class procedure is being called from the    wrong scope, or is improperly qualified. This commonly occurs when calling
    inherited procedures.}
desc incrTcl::procProtected {You are calling an inaccessible procedure with a protection    level of <i>protectionLevel</i>. This error is flagged when the procedure
    being called does not have permission to call this procedure.}
desc incrTcl::warnUnsupported {The incrTcl command is not supported in the current    version of Tcl.}
desc oratcl::badConnectStr {Refer to the "oratcl" manpages or the Oracle    documentation for information about connect string syntax.}
desc oratcl::badOnOff {The "oraautocom" command requires a literal "on" or "off"    value. Refer to the "oratcl" manpages or the Oracle
    documentation for more information.}
desc oratcl::badSubstChar {An invalid substitution character has been passed with    the "orafetch" command. Refer to the "oratcl" manpages or the Oracle
    documentation for more information.}
desc oratcl::missingColon {Variable names must begin with colons. Refer to the    "oratcl" manpages or the Oracle documentation for more information.}
desc tclX::badLIndex {The command expects the string to specify an index value.    The string can be an integer, "len", or "end".}
desc tclX::badProfileOpt {Using the TclX profiling tools, <i>option</i> is not valid.    Most likely the option is valid only when turning on profiling.}
desc tclX::badTlibFile {The command expected a filename with a <i>.tlib</i> suffix.    The word should be changed to match the pattern <i>filename.tlib</i>.}
desc tclX::optionRequired {A specific option was expected, but the following option was    found.}
desc xmlAct::badXMLaction {}
desc sybtcl::badSubstChar {Sybase allows only a limited set of characters for substitution. The command uses a character outside of that set.}
desc coreTk::warnTkCmd {An internal command of Tk is used, this may break when Tk internals are changed.}
desc coreTk::noEvent {The binding is empty, without events}

desc coreTcl::pkgBadExactRq {A package is asked for to match the exact version number, but there is no version number given.}
desc coreTcl::pkgVConflict {The version of the package requested by the command does not match the version already in use by the checker}
desc coreTcl::pkgTclConflict {The version of Tcl required by the chosen version of package does not match what the checker is already using.}
desc coreTcl::pkgTclUnknown {The checker found no indications which version of Tcl to check against and is using a default.}
desc coreTcl::pkgUnchecked {The checker has no command definitions for the requested package. Commands from the packages will be reported as unknown procedures.}
desc coreTcl::warnTclConflict {The version of Tcl required by the script does not match what the checker is already using.}

desc snit::badArgument {snit reserves the argument names 'self', 'selfns', 'type' and 'win' for internal purposes.}
desc snit::warnArgument {snit reserves the argument names 'self', 'selfns', 'type' and 'win' for internal purposes. Only a warning because technically they are not reserved for procs. It is however recommended to avoid them there as well.}
desc snit::badOption {Option names have to start with a dash, and must not contain uppercase characters, nor space.}
desc snit::badUsingFmt {This error indicates that a placeholder character specified with the "using" clause in a "delegate" command is invalid. Refer to the ActiveTcl User Guide for "delegate using" command specifications.}
desc snit::dMissingTo {A "delegate" command has to specify where the method/option is delegated to.}
desc snit::doBadAs {The form "delegate option *" does not allow renaming via "as"}
desc snit::dmBadAs {The form "delegate method *" does not allow renaming via "as"}
desc snit::doBadExcept {Only the form "delegate option *" allows the specification of exceptions.}
desc snit::dmBadExcept {Only the form "delegate method *" allows the specification of exceptions.}
desc snit::dmBadAsUsing {In delegations we can either specify the target via "using", or rename the original via "as", but not both.}
desc snit::badInstallHull {installhull is valid only for snit::widgetadaptors}
desc snit::badExecutionContext {This command is valid only in an instance context, i.e. in method bodies. In typemethods and equivalent we do not have enough information to perform the command.}

desc snit::warnOptionRedefine  {The named option was defined multiple times in the class}
desc snit::badOptionRedefine   {The named option has both a local definition and is attempted to be delegated somewhere else. Snit doesn't support that.}
desc snit::unknownOption       {The named option was not defined for the class} 
desc snit::unknownclassVar     {The named typevariable was not defined for the class}
desc snit::unknowninstanceVar  {The named (instance) variable was not defined for the class}

desc coreTcl::badLocale   {The switch -locale can be used if and only if -format was specified as well}
desc coreTcl::badTimezone {The switch -timezone can be used if and only if -format was specified as well}

desc snit::warnTypemethodRedefine  {The named type method was defined multiple times in the class}
desc snit::badTypemethodRedefine   {The named type method has both a local definition and is attempted to be delegated somewhere else. Snit doesn't support that.}
desc snit::unknownTypemethod       {The named type method was not defined for the class} 

desc snit::warnMethodRedefine  {The named (instance) method was defined multiple times in the class}
desc snit::badMethodRedefine   {The named (instance) method has both a local definition and is attempted to be delegated somewhere else. Snit doesn't support that.}
desc snit::unknownMethod       {The named (instance) method was not defined for the class} 
desc snit::expectedFullMethod  {The named (instance) method is not a fully dispatched name of a multi-word method, but such is expected at the location}

desc snit::warnProcRedefine  {The named proc was defined multiple times in the class}
desc snit::unknownProc       {The named proc was not defined for the class} 

# style warnings

desc warnContinuation           {The command ended in a continuation line with an empty line following, which is suspicious}
desc warnStylePlainWord         {A simple word not containing variable references or subcommands should be quoted with double-apostrophes, if any}
desc warnStylePlainVar          {A single variable reference doesn't need any quoting}
desc warnStyleCodeBlock         {Code blocks quoted with double-apostrophes are subject to a second round of substitution. That is almost always not wanted. Use quoting with curly braces to prevent that}
desc warnStyleArgumentList      {The argument list of a procedure should alsmost always not be subjected to a second round of substitution. Use quoting with curly braces to prevent that}
desc warnStyleExit              {Usage of the 'exit' command should be avoided in packages or test scripts}
desc warnStyleError             {Usage of the 'error' command should be avoided in test scripts}
desc warnStyleOneCommandPerLine {Using multiple separate commands on a single line may lead to difficult to read code. It is better to place them on separate lines}
desc warnStyleCodeblockTooFar   {Two commands in a script have been separated by more than a single empty line, i.e. leading to an overly large gap between them}
desc expect::warnStyleSleep     {Usage of Expect's 'exp_sleep' command should be avoided in test scripts. If that is not possible avoid to sleep overly long}
desc ATS::unwantedShellHeader   {While use of the ATS shell header is expected for applications and test scripts it makes no sense to do so for packages}
desc ATS::badShellTest          {The ATS shell header for test scripts should refer to tclsh via the environment variable AUTOTEST and not use a central installation}
desc ATS::badShellHeader        {The shell header expected for ATS application and test scripts is either missing, or using an obsolete form which is not recognized}

desc warnStyleExprBoolEquality   {The expression uses == and/or != to compare against a boolean constant. A == can be removed, a != replaced by a plain !, given that the expression is already a boolean for this to work} ; # S3.2
desc warnStyleExprOperatorParens {Be cautious with sub-expressions, use parentheses} ; # S3.3

desc warnNoDefault               {Switch/case commands should have a default branch, to catch unexpected input} ; # S4.1

desc warnMisplacedDefault        {
Switch/case commands should have a default branch, to catch unexpected input.
This command has such a branch, but in a place where it will not be recognized as such.
Default branches have to be specified as the last branch in a switch/case.
} ; # S4.1

desc warnStyleCodeBlockShort     {For readability the code in a braced script should start and end on separate lines, i.e. the enclosing braces should on their own lines} ; # R1.1
desc warnStyleNesting            {Readability of code is impaired if nested very deeply, especially when also trying to avoid overly long lines} ; # R1.3
desc warnStyleLineTooLong        {Overly long lines impair code readability} ; # R1.4

desc warnDollar {
    A single dollar character was found and might have been separated
    from the variable name it belongs to and coming after it.
}

desc warnStyleExprOperatorWhitespace {The operator is not separated by whitespace from the remainder of the expression} ; #R1.6
desc warnStyleIndentCommand          {The actual indentation of the command does not match our expectations based on the nesting level} ; # R1.7
desc warnStyleIndentBlock            {The indentation at the end of the code block does not match our expectations} ; #R1.8
desc warnStyleNameProcedure          {The procedure name violates the specified pattern} ; #R2.1
desc warnStyleNameNamespace          {The namespace name violates the specified pattern} ; #R2.2
desc warnStyleNameVariable           {The variable name violates the specified pattern} ; #R2.3
desc warnStyleNamePackage            {The package name violates the specified pattern} ; #R2.4
desc warnStyleNameVariableTooShort   {The variable name is considered to be too short for good code} ; #R2.5
desc warnStyleNameVariableTooLong    {The variable name is considered to be overly long for good code} ; #R2.6
desc coreTcl::warnStyleNameVariableConstant {The variable name seems to refer to a constant (numeric), should be capitalized} ; #R2.7
desc coreTcl::warnStyleThen          {Exclude superfluous "then" from "if" commands} ; #S8.1

desc warnBadSequenceFirst {
     A package has defined ordering requirements for one or more of its
     commands, and a violation was detected. Specifically the named
     command is not allowed to be the first command in a sequence.
     Likely some initialization command has to come before it.
}
desc warnBadSequence {
     A package has defined ordering requirements for one or more of its
     commands, and a violation was detected. Specifically the first named
     command is not allowed to be run after the second named command.
     The line the second command is on is provided, for reference.
}

desc coreTk::warnTtkStateOption {
     The option -state of ttk widgets exists for compatibility with
     core widgets and with preexisting code that expects to work with
     core widgets.

     The preferred way of changing state is with the [$w state ...]
     widget command.
}

desc coreTk::warnTtkPadding {
     The option -padding is officially supported only by the
     ttk::frame and ttk::label widgets. All others may accept the
     option, but it is not guarantueed to work, and may be removed in
     the future.
}
