# -*- tcl -*- blend.pcx --
#
#	This file implements the TclPro Checker extension for Tcl Blend.
#
# Copyright (c) 1999-2000 Ajuba Solutions
# Copyright (c) 2003-2006 ActiveState Software Inc.
# All rights reserved.
# 
# RCS: @(#) $Id: blend.pcx,v 1.6 2000/05/30 22:28:47 wart Exp $

# ### ######### ###########################
## Requisites

package require pcx          ; # PCX API

# ### ######### ###########################
## Tcl core version dependencies of the package this checker is for.

pcx::register blend
pcx::tcldep   1.2 needs tcl

# ### ######### ###########################

# ### ######### ###########################
## Package specific message types and their human-readable
## translations.

# ### ######### ###########################
# scanCmdsX.X --
# Define the set of commands that need to be recursed into when 
# generating a list of user defiend procs, namespace and Class 
# contexts and procedure name resolutions info.

pcx::scan 1.2 java::bind
pcx::scan 1.2 java::try

# ### ######### ###########################
# Define the set of command-specific checkers used by this package.

pcx::check 1.2 std java::autolock	{checkSimpleArgs 0 1 {{checkOption {
    {activate {checkSimpleArgs 0 0 {}}}
} {}}}}
pcx::check 1.2 std java::bind		{checkSimpleArgs 1 3 {checkWord checkWord checkBody}}
pcx::check 1.2 std java::call		{checkHeadSwitches 0 1 {-noconvert} {
    checkSimpleArgs 2 -1 checkWord}
}
pcx::check 1.2 std java::cast		{checkSimpleArgs 2 2 {checkWord checkWord}}
pcx::check 1.2 std java::defineclass	{checkSimpleArgs 1 1 checkWord}
pcx::check 1.2 std java::event		{checkSimpleArgs 0 3 {{checkSwitches 0 {
    {-index {checkWholeNum}}
} {checkSimpleArgs 0 1 checkWord}}}}
pcx::check 1.2 std java::field		{checkHeadSwitches 0 1 {-noconvert} {
    checkSimpleArgs 2 -1 {checkWord checkWord blend::checkOddNumWords}}
}
pcx::check 1.2 std java::getinterp	{checkSimpleArgs 0 0 {}}
pcx::check 1.2 std java::info		{checkSimpleArgs 1 4 {{checkOption {
    {baseclass		{checkSimpleArgs 1 1 {checkWord}}}
    {class		{checkSimpleArgs 1 1 {checkWord}}}
    {constructors	{checkSimpleArgs 1 1 {checkWord}}}
    {dimensions		{checkSimpleArgs 1 1 {checkWord}}}
    {events		{checkSimpleArgs 1 1 {checkWord}}}
    {fields		{checkSimpleArgs 1 3 {{
	checkSwitches 0 {-type {} -static {}} {
	    checkSimpleArgs 1 1 checkWord}}}}
	}
	{methods		{checkSimpleArgs 1 3 {{
	    checkSwitches 0 {-type {} -static {}} {
		checkSimpleArgs 1 1 checkWord}}}}
	    }
	    {properties		{checkSimpleArgs 1 2 {checkWord {
		checkSwitches 0 {-type {}} {}}}}
	    }
	    {superclass		{checkSimpleArgs 1 1 {checkWord}}}
	} {}}}
}
pcx::check 1.2 std java::instanceof	{checkSimpleArgs 2 2 {checkWord checkWord}}
pcx::check 1.2 std java::isnull		{checkSimpleArgs 1 1 checkWord}
pcx::check 1.2 std java::load		{checkSimpleArgs 1 3 {{checkSwitches 0 {
    {-classpath {checkListValues 2 -1 checkFileName}}
} {checkSimpleArgs 1 1 checkFileName}}}}
pcx::check 1.2 std java::lock		{checkSimpleArgs 1 1 checkWord}
pcx::check 1.2 std java::new		{checkSimpleArgs 1 -1 checkWord}
pcx::check 1.2 std java::prop		{checkHeadSwitches 0 1 {-noconvert} {
    checkSimpleArgs 2 -1 {checkWord checkWord blend::checkOddNumWords}}
}
pcx::check 1.2 std java::null		{checkSimpleArgs 0 0 {}}
pcx::check 1.2 std java::throw		{checkSimpleArgs 1 1 checkWord}
pcx::check 1.2 std java::try		{checkSimpleArgs 1 -1 {
    checkBody blend::checkTry}
}
pcx::check 1.2 std java::unlock		{checkSimpleArgs 1 1 checkWord}

# ### ######### ###########################
## Initialization

# ### ######### ###########################
# Checkers for specific commands

namespace eval ::blend {}

# blend::checkOddNumWords --
#
#	Check for an odd number of args, each of which must be a word.
#	Log a numArgs error if there's an even number of args.
#
# Arguments:
#	tokens		The list of word tokens for the current command.
#	index		The index of the next word to be checked.
#
# Results:
#	Returns the index of the last token + 1 (all have been checked).

proc blend::checkOddNumWords {tokens index} {
    set word [lindex $tokens $index]

    set max [llength $tokens]

    while {$index < $max} {
	set index [checkWord $tokens $index]
	if {$index >= $max} {
	    return $index
	}
	set index [checkWord $tokens $index]
    }
    logError numArgs {}
    return $index
}

# blend::checkTry --
#
#	Check args of the pattern:
#		?catch exception_pair script ... ? ?finally script?
#
# Arguments:
#	tokens		The list of word tokens for the current command.
#	index		The index of the next word to be checked.
#
# Results:
#	Returns the index of the last token + 1 (all have been checked).

proc blend::checkTry {tokens index} {

    set max [llength $tokens]

    while {$index < $max} {
	set word [lindex $tokens $index]

	# If keyword is nonliteral, make a best guess as to which literal
	# it is based on the remaining number of tokens.

	if {![getLiteral $word literal]} {
	    if {$index == [expr {$max - 2}]} {
		set literal "finally"
	    } else {
		set literal "catch"
	    }
	}

	if {$literal == "catch"} {
	    if {[incr index] < $max} {
		set index [checkListValues 2 2 checkWord \
			$tokens $index]
	    }
	    if {$index >= $max} {
		logError numArgs {}
		return $index
	    }
	    set index [checkBody $tokens $index]
	} elseif {$literal == "finally"} {
	    if {[incr index] >= $max} {
		logError numArgs {}
		return $index
	    }
	    return [checkBody $tokens $index]
	} else {
	    logError badKey [getTokenRange $word] $literal "catch or finally"
	    return $max
	}
    }
    return $index
}

# ### ######### ###########################
pcx::complete
