Interface definitions
=====================

Basic information
=================

For each package P we wish to check a "checker" package CP has to be
provided which declares how to check the commands provided by P.

The package CP can use commands in the procheck package [*]
"analyzer".

The package CP has nearly full use of the namespace ::P.
It has to declare the following commands

*	::P::init version

	Argument is the version of P to check for.
	This command has to register all commands
	and how to check them. More later. The
	command for doing so are

		addScanCmds
		addCheckers

	as provided by the procheck package "analyzer".

*	::P::getMessage mid
	::P::getTypes   mid

	Interface to message generation.
	Called by the procheck package "message".

	getMessage has to map message-id's into
	human readable message text.

	getTypes has to map message-id's into a list of message types
	which classify the message.

	The types recognized by the procheck packages are
	...

	The message-id's generated when checking commands of P have to
	be unique. To that end all procheck packages assume that the
	message-id's generated by CP have "P::" as their prefix.

[*] "procheck package": Our term for a package declared by procheck
    itself, used to structure the checker application. The actual
    application is just a driver requiring the procheck packages and
    calling public commands.


Checker commands, overview, basic interface
===========================================

A checker command is the fundamental building block for checking a tcl
command.

Whenever the procheck packages have to check the invocation of a
command C they consult an internal database mapping from command names
to checker commands, retrieve the checker command associated with C
and evaluate it. Actually the database does not map to command, but to
command prefixes. This means that it is possible to use a single
generic checker command for many commands, with suitable
parameterization.

A checker command has to take the following information as its last
two arguments:

*	token

	The datastructure describing the command and its components in
	detail, as generated by the parser package.

*	index

	An index into "token", the index of the next
	word which has to be checked by the command.

Each checker command has to return the index of the
first word in token which was _not_ processed by the
command itself. IOW the next word to be checked.

It is this interface definitions which allows us not only to write
generic checker commands, but also checker commands which call one or
more other checker commands to perform the actual work,
i.e. composition commands.

The style of programming caused by this is 'functional application'.

Two major patterns can be recognized

*	Direct chaining

	A checker command CC performs some work and then hands the rest
	of the work off to another checker command which was
	explicitly specified as part of the arguments to CC.

*	Grouping

	A checker command CC is given several other checker commands
	as its arguments and calls them in various patterns.

	Examples

	= Dispatch based upon the first word CC has to check.
	= Calling in sequence, each sub checker starting at the word
	  where the last checker stopped.

The procheck package "analyzer" provides a variety of standard
checkers which can be used to compose individual checkers for the
commands of P.

Checker commands, basic library (analyzer)
==========================================

checkContext cIndex strip chainCmd
	Pushes a context on the context stack,
	then calls the chained checker

	cIndex =	Index of the word containing the context
			information.
	strip =		Boolean, set if word containing context
			name has to have the head stripped off

	For scan commands.

checkUserProc pInfo
	Checks a "proc" for the correct number of arguments

	pInfo =		Proc declaration (argument lists)

checkRedefined
	Checks if the procedure in the word to check is
	defined more than once

checkBody
	Check a script in a single word (procedure body,
	control commands).

checkWord
	Check if the word contains subcommands, etc. and invokes
	their checker commands.

checkExpr
	Check the expression for subcommands, etc.

checkCommand
	Checks each word (checkWord) in the command.

checkSimpleArgs min max checkers
	Checks that the number of arguments is between min and max. If
	that is not the case we default to checkCommand to check all
	words. If the number of words is in the specified range we go
	through the list of checkers and execute them. Each checker is
	started where its predecessor left off. If there are words
	left to check after the last checker was executed the
	execution of the last checker is repeated until there are no
	words left.

	A value of -1 for max means that the number of arguments has
	no finite upper bound.

	This is the basic sequential composition operator.

checkTailArgs head tail backup

	Similar to the previous checker, but not quite. backup is the
	number of fixed tail arguments for the command. These are
	check through the execution of tailCmd. All other arguments
	are checked with headCmd. The head arguments are checked
	before the tail arguments.

	If the head checker did not process an argument checkWord will
	be used instead. This happens until all head arguments are
	processed.

checkTailArgsFirst head tail backup
	See checkTailArgs, but the tail arguments are checked before
	the head arguments.

checkSwitchArg switch min num cmds
	This command checks switch arguments similar to the
	checkSimpleArgs checker.  It checks to see if the minimum
	number of words can be found in the current command, and then
	checks "num" args.  This checker is designed to be used inside
	custom checkers to assist checking switch arguments (e.g., the
	"expect" command.)

checkOption optionTable default
	This is the primary composition operator for handling of
	subcommands (here called options).

	The optionTable is a list of 2-tuples mapping from subcommand
	names to checkers for the arguments after the subcommand.

	If none of the options match the 'default' checker is used.
	If the default is empty an error will be generated for that
	case.

	Defaults to checkCommand if the subcommand word is no literal.


checkWidgetOptions allowsingle commonopts widgetopts
	Convenience wrapper to checkConfigure, see below.

checkKeyword exact keywords
	Checks that the next word is on the list of allowed
	keywords. If exact is not set unique abbreviations of the
	keywords are allowed too. Falls back to checkWord for
	non-literals.

checkSwitches exact switches chain
	Similar to checkKeyword.
	Differences:
	*	switches is a list of switch/action pairs. If a switch
		does not take an argument the action can be empty.
		"--" is a terminator.

		If a switch with an action is found the checker in the
		action is executed for the switch argument.

	*	After processing the switches the chained checker is
		called to process the arguments after the switches.
		(If a checker to chain to was specified).

checkHeadSwitches exact backup switches chaincmd
	Similar to checkSwitches.
	Does not check for switches beyond the 'backup' tail arguments
	of the command. Ignores arguments behind the switches.

checkSwitchesArg exact switches chain
	Similar to checkSwitches.
	Difference: Decouples the execution of checkers for a switch
	from the notion that a switch takes an argument. This allows
	for switches without argument, yet needing a checker, for
	example to warn about portability problems with said switch.

checkConfigure allowsingle options
	Options is a list of switch/action pairs. If allowsingle is
	set a single argument is ok, else an error is
	generated. Checks the arguments for options and value as
	defined in the table.

checkFloatConfigure
	See checkConfigure above, but does not check the option
	values.

checkNumArgs chainlist
	A list of 2-tuples. First element of a tuple is the number of
	arguments triggering the checker specified as the second
	element of that tuple.

checkListValues min max checkers
	Basic behaviour as checkSimpleArgs, but for checking a list,
	not a command.

checkLevel chaincmd
	Checks that next word is a valid level designator (#n, n)
	and then invokes the chained checker

checkProcCall argstoadd
	argstoadd = Number of non-literal arguments to append to the proc call.
		Ignored

checkEvalArgs
	See checkBody, but script is distributed over a list of arguments
	(examples: eval, after, ...)

checkRestrictedSwitches exact switches chain
	See checkSwitches for basic behaviour
	Difference: Stops at first not recognized switch
	Does _not_ log unrecognized switches as error.

checkBoolean, checkInt, checkFloat, checkWholeNum, checkIndex,
checkIndexExpr, checkByteNum, checkList, checkVarName, checkProcName,
checkFileName, checkChannelID, checkArgList, checkNamespace,
checkNamespacePattern, checkExportPattern, checkPattern,
checkAccessMode, checkResourceType, checkVersion, checkWinName,
checkColor, checkPixels, checkCursor, checkRelief

	checking that the next words is of a specific type

	WholeNum  === integer >= 0
	Index     === integer, or "end"
	IndexExpr === integer, or "end", or "end"-integer
	ByteNum   === integer, in range 0 ... 255
	List	  === parseable by list command.
	ArgList   === List, nothing after 'args', no non-default args
			after defaulted args, 'args' not defaulted.

warn mid detail chain
	generates a error/warn message and then invokes the chained
	checker

