# -*- tcl -*- registry.pcx --
#
#	This file contains type and command checkers for the
#	"registry" commands.
#
# Copyright (c) 2004-2006 ActiveState Software Inc.

# 
# RCS: @(#) $Id: tkTable.tcl,v 1.3 2000/10/31 23:30:55 welch Exp $

# ### ######### ###########################
## Requisites

package require pcx          ; # PCX API

# ### ######### ###########################
## Tcl core version dependencies of the package this checker is for.

pcx::register registry registry
pcx::tcldep   1.0 needs tcl 8.0
pcx::tcldep   1.1 needs tcl 8.4

# ### ######### ###########################

# ### ######### ###########################
## Package specific message types and their human-readable
## translations.

# ### ######### ###########################
# scanCmdsX.X --
# Define the set of commands that need to be recuresed into when 
# generating a list of user defiend procs, namespace and Class 
# contexts and procedure name resolutions info.

# ### ######### ###########################
# checkersX.X --
# Define the set of command-specific checkers used by this package.

# registry 1.0 -> Tcl 8.0

# ### ######### ###########################
## Initialization

## This package relies on the standard initialization sequence of
## 'pcx::init'. This is automatically called if no 'init' command
## is found in the namespace of the checker package.

# ### ######### ###########################

# ### ######### ###########################
# Checkers for specific commands --
#
#	Each checker is passed the tokens for the arguments to 
#	the command.  The name of each checker should be of the
#	form tkTable::check<Name>Cmd, where <name> is the command
# 	being checked.
#
# Arguments:
#	tokens		The list of word tokens after the initial
#			command and subcommand names
#	index		The index into the token tree where the 
#			checkers should start checking.
#
# Results:
#	Return the next index, in the tokens tree, to check.

pcx::check 1.0 std registry	{::analyzer::warn nonPortCmd {} {checkSimpleArgs 2  5 {
    {checkOption {
	{delete 	{checkSimpleArgs 1 2 {checkWord}}}
	{get 		{checkSimpleArgs 2 2 {checkWord}}}
	{keys 		{checkSimpleArgs 1 2 {checkWord checkPattern}}}
	{set 		{checkNumArgs {
	    {1  {checkSimpleArgs 1 1 {checkWord}}}
	    {3  {checkSimpleArgs 3 3 {checkWord}}}
	    {4 {checkSimpleArgs 3 4 {
		checkWord checkWord checkWord
		{checkKeyword 1 { \
			binary none sz expand_sz dword dword_big_endian \
			link multi_sz resource_list}}}}}
	    }
	}
    }
    {type 		{checkSimpleArgs 2 2 {checkWord}}}
    {values 	{checkSimpleArgs 1 2 {checkWord checkPattern}}}
} {}}}}}

pcx::check 1.1 std registry	{::analyzer::warn nonPortCmd {} {checkSimpleArgs 2  5 {
    {checkOption {
	{broadcast      {checkSimpleArgs 1 3 {checkWord {checkSwitches 1 {{-timeout checkWholeNum}} {}}}}}
	{delete 	{checkSimpleArgs 1 2 {checkWord}}}
	{get 		{checkSimpleArgs 2 2 {checkWord}}}
	{keys 		{checkSimpleArgs 1 2 {checkWord checkPattern}}}
	{set 		{checkNumArgs {
	    {1  {checkSimpleArgs 1 1 {checkWord}}}
	    {3  {checkSimpleArgs 3 3 {checkWord}}}
	    {4 {checkSimpleArgs 3 4 {
		checkWord checkWord checkWord
		{checkKeyword 1 { \
			binary none sz expand_sz dword dword_big_endian \
			link multi_sz resource_list}}}}}
	    }
	}
    }
    {type 		{checkSimpleArgs 2 2 {checkWord}}}
    {values 	{checkSimpleArgs 1 2 {checkWord checkPattern}}}
} {}}}}}

# ### ######### ###########################
pcx::complete
