# Copyright (c) 2018 ActiveState Software Inc.
# Released under the BSD-3 license. See LICENSE file for details.
#
# -- Tcl Module

# @@ Meta Begin
# Package runwindow 1.0
# Meta platform    tcl
# Meta require     log::window
# Meta require     snit
# Meta require     tooltip
# @@ Meta End

# -*- tcl -*-
# runwindow.tcl --
#
#	-- A window to execute something and to display log information
#
#	This file implements a widget to activate some processing and
#	for the display of log information generated by that process.
#
# Copyright (c) 2004-2006 ActiveState Software Inc.
#

#
# RCS: @(#) $Id: dbg.tcl,v 1.8 2000/10/31 23:30:57 welch Exp $

# ### ### ### ######### ######### #########
## Requisites

package require log::window ; # AS package | Log window
package require tooltip     ; # AS package | Basic tooltips.
package require snit        ; # OO system of choice.

# ### ### ### ######### ######### #########
## Implementation

snit::widget ::runwindow {
    hulltype ttk::frame

    option {-errorbackground errorbackground Color}  lightyellow
    option {-labelhelp       labelhelp       String} {Run application}
    option -command {}

    delegate option -label to run as -text
    delegate option *      to log
    delegate method *      to log
    delegate option -padding to hull

    component log
    component run

    constructor {args} {
	install run using ttk::button $win.run
	install log using log::window $win.log

	grid $run -column 0 -row 0 -sticky  w   -padx 1m -pady 1m
	grid $log -column 0 -row 1 -sticky swen -padx 1m -pady 1m

	grid columnconfigure $win 0 -weight 1

	grid rowconfigure $win 0 -weight 0
	grid rowconfigure $win 1 -weight 1

	$self configurelist $args
	if {[$run cget -text] eq ""} {
	    $run configure -text Run
	}
	tooltip::tooltip $run $options(-labelhelp)
	return
    }

    destructor {
	return
    }

    onconfigure -labelhelp {value} {
	set options(-labelhelp) $value
	tooltip::tooltip $run $options(-labelhelp)
	return
    }
    onconfigure -command {value} {
	if {$value eq ""} {
	    $run configure -command {}
	} else {
	    $run configure -command [mymethod Run $value]
	}
	return
    }

    method enable {{clear 1}} {
	$run configure -state normal
	#$run configure -background $normalbg
	if {$clear} {$log clear}
	return
    }

    method disable {{reason {}}} {
	$run configure -state disabled

	if {$reason != {}} {
	    #$run configure -background $options(-errorbackground)
	    $log clear
	    foreach line [split $reason \n] {
		$log log info $line
	    }
	}
	return
    }

    method Run {cmd} {
	after 0 [list uplevel #0 $cmd]
	return
    }

    # ### ### ### ######### ######### #########
}


# ### ### ### ######### ######### #########
## Ready to go
return
