TDK 3.0 Checker Xref Cross-reference data
=========================================

Metakit database for cross reference information
------------------------------------------------

How much smaller is a metakit database over the information as
generated by the backend (tcl script) ? Is usage of the metakit
database faster ?


This is the normalized database schema. In other words, every piece
information is present only once, and the views refer to each for to
complete their own contents.



Views
~~~~~
	The following views are defined to hold the cross-refererence
	data.
			Type
	File
	Location
	Namespace	'N'
	Variable	'V'
	Command		'C'

File
~~~~
	Column	Type		Notes
	------	----		-----
	%rowid	int		Internal id for file, main reference
	md5	string		Md5 id, external, also change indicator
	where	sv		subview listing all paths to the same file.
		- path	string	- filesystem path
	------	----		-----

Location
~~~~~~~~
	Column	Type		Notes
	------	----		-----
	%rowid	int		Internal location id
	file	int		id of the file
	line	int		line in the file
	begin	int		| range, offset of starting character in file
	size	int		|        size in characters
	end	int		|	 offset of first character behind range
	parent	int		id of containing location, if any, -1 if none.
	obj	sv		subview listing all objects defined at this location.
		- id	int	- id of the object in its view
		- type	char	- type of the object [N,V,C], determines view.
	------	----		-----

Namespace
~~~~~~~~~
	Column	Type		Notes
	------	----		-----
	%rowid	int		Internal namespace id
	name	string		Fully qualified name, external id.
	parent	int		id of parent namespace, if any. -1 if none.
	def	sv		subview list all definitions.
		- loc	int	- id of location where defined. parent of
				  location delivers possible container.
	use	sv		subview
		- loc	int	- id of location id where used. parent, s.a
	------	----		-----

Variable
~~~~~~~~~
	Column	Type		Notes
	------	----		-----
	%rowid	int		Internal variable id.
	name	string		| Defining id of the variable:
	type	char		| * name, * type of scope, * id of scope,
	sid	int		| for proc scopes the accurate location
	sloc	int		| of the scope. -1 if no location is required
	def	sv		subview list all definitions.
		- loc	int	- id of location where defined. parent of
				  location delivers possible container.
		- type  string	- type of the definition at the location
		- otype	char	\ Reference to origin scope. Special types:
		- oid	int	| U = Unknown, R = upvar 'R'esolve.
		- sv	call	| Caller references for 'R', as far as can be
		  - type char	| known. (oid is level, and not id for 'R')
		  - id	 int	/
	use	sv		subview
		- loc	int	- id of location id where used. parent, s.a
	------	----		-----

Command
~~~~~~~~~
	Column	Type		Notes
	------	----		-----
	%rowid	int		Internal namespace id
	name	string		Fully qualified name, external id.
	def	sv		subview list all definitions.
		- loc	int	- id of location where defined. parent of
				  location delivers possible container.
		- type	string	- Type of command (renamed, imported, proc, class, builtin, ...)
		- prot	string	- Protection level (public, protected, private, ...)
		- escope int	- Id of namespace scope the command belongs to during execution.
		- origin int	- Id of command this came from through import or rename

	use	sv		subview
		- loc	int	- id of location id where used. parent, s.a
	------	----		-----



Alternate definition
--------------------

Instead of using different views per entity use one view to contain
all the common information, including the type, and then additional
view to hold the type specific data.

It is unclear how the two veiw structures compare with respect to
access and search times ...

The alternate structure requires less data for entity interlinking
(only the integer id, no type), but filtering is required when trying
to list entities of a particular type. Searching might also take
longer.


Notes
-----

*	The reverse mapping from locations in files to entities is at
	least partially stored in the view structure we defined. We
	have to locate all matching ranges in 'Location' (restricted
	to a file), but from there it is a direct jump to the relevant
	data (direct for the location, and also the parent /
	containing lcoations).

*	The 'end' position for location range was added to make
	interval comparison easier. I.e. directly executable in the
	database, without the need for additional mathematical
	operations at a higher level.

*	It is unclear how much speedup we will get during location
	based searching for storing the locations found in a file in
	the 'File' view. It makes finding the list of relevant files
	easy, but also moves the range matching into the higher level
	code, and requires more memory.

Notes II
--------

Usage of the normalized schema means that the conversion from procheck
output to metakit database throws a lot of stuff away. This has to be
reconstructed in the frontend, for proper display.

Part of the information can be reconstructed via joins to resolve view
references, but not everything. Unfortunately the 'join's currently
run into core dumps in the metakit database.

This means that I currently either have to reconstruct all the lost
information by directly in the frontend, after loading the database,
or use a denormalized schema containing the references, but also
redundant information in the various views so that this information
doesn't have to be computed.

The first incurs a longer time for startup, the second means that the
database is larger. The second option is chosen as the slowdown in
startup is very noticeable, even for small databases, whereas the
increase in size is not to much.


Metakit database for cross reference information, DENORMALIZED
--------------------------------------------------------------

Views
~~~~~
	The following views are defined to hold the cross-refererence
	data.
			Type
	File
	Location
	Namespace	'N'
	Variable	'V'
	Command		'C'

File
~~~~
	Column	Type		Notes
	------	----		-----
	%rowid	int		Internal id for file, main reference
	md5	string		Md5 id, external, also change indicator
	where	sv		subview listing all paths to the same file.
		- path	string	- filesystem path
	------	----		-----
	where_str string	[join where \n]
	------	----		-----

Location
~~~~~~~~
	Column	Type		Notes
	------	----		-----
	%rowid	int		Internal location id
	file	int		id of the file
	line	int		line in the file
	begin	int		| range, offset of starting character in file
	size	int		|        size in characters
	end	int		|	 offset of first character behind range
	parent	int		id of containing location, if any, -1 if none.
	obj	sv		subview listing all objects defined at this location.
		- id	int	- id of the object in its view
		- type	char	- type of the object [N,V,C], determines view.
	------	----		-----
	file_str string		DEREF (file): db.file!${file}.where_str
	hasobj	string		[obj size] > 0 => "yes", else "no".
	obj	sv
		- name	string	DEREF (type, id)
	------	----		-----

Namespace
~~~~~~~~~
	Column	Type		Notes
	------	----		-----
	%rowid	int		Internal namespace id
	name	string		Fully qualified name, external id.
	parent	int		id of parent namespace, if any. -1 if none.
	def	sv		subview list all definitions.
		- loc	int	- id of location where defined. parent of
				  location delivers possible container.
	use	sv		subview
		- loc	int	- id of location id where used. parent, s.a
	------	----		-----
	defn	int		[def size]
	usen	int		[use size]
	def	sv
		- file_str	| DREF (loc), db.location data
		- line		| partially.
		- hasobj	|
		- begin		|
		- size		|
	use	sv
		- file_str	| DREF (loc), db.location data
		- line		| partially.
		- hasobj	|
		- begin		|
		- size		|
	------	----		-----

Variable
~~~~~~~~~
	Column	Type		Notes
	------	----		-----
	%rowid	int		Internal variable id.
	name	string		| Defining id of the variable:
	type	char		| * name, * type of scope, * id of scope,
	sid	int		| for proc scopes the accurate location
	sloc	int		| of the scope. -1 if no location is required
	def	sv		subview list all definitions.
		- loc	int	- id of location where defined. parent of
				  location delivers possible container.
		- type  string	- type of the definition at the location
		- otype	char	\ Reference to origin scope. Special types:
		- oid	int	| U = Unknown, R = upvar 'R'esolve.
		- sv	call	| Caller references for 'R', as far as can be
		  - type char	| known. (oid is level, and not id for 'R')
		  - id	 int	/
	use	sv		subview
		- loc	int	- id of location id where used. parent, s.a
	------	----		-----
	scope	string		Scope name, DEREF (type, sid)
	fullname string		Full name of variable
	defn	int		[def size]
	usen	int		[use size]
	def	sv
		- file_str	| DREF (loc), db.location data
		- line		| partially.
		- calln		[call size]
		- origin_str	DEREF (otype, oid)
		- call
		  - name	Caller name, DEREF (type, id)
	use	sv
		- file_str	| DREF (loc), db.location data
		- line		| partially.
	------	----		-----

Command
~~~~~~~~~
	Column	Type		Notes
	------	----		-----
	%rowid	int		Internal namespace id
	name	string		Fully qualified name, external id.
	def	sv		subview list all definitions.
		- loc	int	- id of location where defined. parent of
				  location delivers possible container.
		- type	string	- Type of command (renamed, imported, proc, class, builtin, ...)
		- prot	string	- Protection level (public, protected, private, ...)
		- escope int	- Id of namespace scope the command belongs to during execution.
		- origin int	- Id of command this came from through import or rename

	use	sv		subview
		- loc	int	- id of location id where used. parent, s.a
	------	----		-----
	defn	int		[def size]
	usen	int		[use size]
	def	sv
		- escope_str	DEREF (N, escope): name
		- origin_str	DEREF (C, origin): name
		- file_str	| DREF (loc), db.location data
		- line		| partially.
	use	sv
		- file_str	| DREF (loc), db.location data
		- line		| partially.
		- hasobj	|
		- begin		|
		- size		|
	------	----		-----
