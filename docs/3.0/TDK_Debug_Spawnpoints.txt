
Debugging multiple processes
============================

The basic foundation is a new command which can be used in PDX files:

        instrument::nubCommand name arguments body

This command allows the user of prodebug to define a wrapper his/her
own commands. The debugger will load this wrapper into the debugged
application, whenever the application calls the command 'name' the
wrapper will be called instead. Inside of the wrapper 'body' the
original command is available under the name 'DbgNub_<name>cmd'.

Based on this foundation spawnpoints and debugging multiple processes
become possible.



If, for example, there is a command 'foo' which creates a new tcl
process in some way, and the new process has to be brought under
debugger control if the user wishes so then it is necessary to write a
wrapper for 'foo'.

This wrapper has to query the nub [1] if the process generated by the
current invocation of the command has to be brought under debugger
control. The nub delivers a yes or no, dependent on what the user
specified via the frontend. This query is implemented by reading the
value of the global variable --> DbgNub(spawnpoint).

The yes/no information can be set by the user, per line of code.  If a
yes was delivered we call the line in question a --> spawnpoint.

After determining if the code is at a spawnpoint the wrapper has to
talk to the frontend to set up a connection in it which can talk to
the process about to be created. The connection in the frontend has a
listening port / server socket where it will wait for the new process
to connect. The port number is given to the wrapper as result of the
interaction, so that it can deliver this information to where the
process is actually created.

The last action of the wrapper is to somehow create the new process
prepared for the debugger. This involves the file --> appLaunch.tcl.
If that is done correctly the new process will contact the new
listening port and establish the full debugger in the new process. The
frontend is then ready to talk to both the old and new processes.



Regarding the setting of spawnpoints in the frontend/GUI, this is done
via the mouse, button 3.



----
[1] nub is the name for the debugger runtime environment which resides
in the application to debug, and controls its execution.
